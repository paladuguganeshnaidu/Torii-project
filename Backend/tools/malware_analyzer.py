import hashlib
import os
from flask import request
from werkzeug.utils import secure_filename

def analyze_file_tool(flask_request):
    """
    Analyze uploaded files for potential malware indicators
    """
    if 'sample' not in flask_request.files:
        return {'error': 'No file provided'}
    
    file = flask_request.files['sample']
    if not file.filename:
        return {'error': 'No file selected'}
    
    # Save temporarily
    filename = secure_filename(file.filename)
    temp_path = os.path.join('temp', filename)
    os.makedirs('temp', exist_ok=True)
    file.save(temp_path)
    
    try:
        # Calculate file hashes
        hashes = calculate_hashes(temp_path)
        
        # Basic file analysis
        file_size = os.path.getsize(temp_path)
        
        # Simple heuristic checks
        suspicious_indicators = []
        
        # Check for executable characteristics
        if file_size > 1000000:  # Larger than 1MB
            suspicious_indicators.append('Large file size')
        
        # Check filename for suspicious extensions
        suspicious_extensions = ['.exe', '.bat', '.scr', '.com']
        if any(filename.lower().endswith(ext) for ext in suspicious_extensions):
            suspicious_indicators.append('Suspicious file extension')
        
        # Check for common malware patterns in first 1KB
        with open(temp_path, 'rb') as f:
            header = f.read(1024)
            if b'MZ' in header[:2]:
                suspicious_indicators.append('Windows executable header')
        
        results = {
            'filename': filename,
            'size': file_size,
            'hashes': hashes,
            'suspicious': len(suspicious_indicators) > 0,
            'indicators': suspicious_indicators,
            'risk_level': 'high' if len(suspicious_indicators) > 2 else 'medium' if len(suspicious_indicators) > 0 else 'low'
        }
        
        return results
    finally:
        # Clean up temporary file
        if os.path.exists(temp_path):
            os.remove(temp_path)

def calculate_hashes(file_path):
    """Calculate MD5, SHA1, and SHA256 hashes of a file"""
    hashers = {
        'md5': hashlib.md5(),
        'sha1': hashlib.sha1(),
        'sha256': hashlib.sha256()
    }
    
    with open(file_path, 'rb') as f:
        while chunk := f.read(8192):
            for hasher in hashers.values():
                hasher.update(chunk)
    
    return {k: v.hexdigest() for k, v in hashers.items()}